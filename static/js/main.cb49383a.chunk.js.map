{"version":3,"sources":["components/ReportViewer.js","components/ReportDesigner.js","App.js","serviceWorker.js","index.js"],"names":["ReportViewer","window","jQuery","telerik_ReportViewer","serviceUrl","reportSource","report","scale","sendEmail","enabled","react_default","a","createElement","id","Component","ReportDesigner","telerik_WebReportDesigner","toolboxArea","layout","data","style","top","App","child","padding","margin","backgroundColor","react_router_dom","className","display","this","renderLink","to","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"itBAEqBA,0KAGjBC,OAAOC,OAAO,kBAAkBC,qBAAqB,CACnDC,WAAY,mDACZC,aAAc,CACZC,OACE,+HAEJC,MAAO,EACPC,UAAW,CAAEC,SAAS,sCAKxB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,yBAfuBC,ycCArBC,0KAEjBd,OAAOC,OAAO,sBACXc,0BAA0B,CACzBC,YAAa,CACXC,OAAQ,QAEVd,WAAY,0DACZE,OAAQ,mBAETa,KAAK,wDAIR,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,oBAAoBO,MAAO,CAAEC,IAAK,kBAdTP,ycC+B7BQ,iKAzBFC,GACT,OAAOb,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEI,QAAS,MAAOC,OAAQ,MAAOC,gBAAiB,oBAClEH,oCAKH,OACEb,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAES,QAAS,SACtBC,KAAKC,WAAWrB,EAAAC,EAAAC,cAAA,4BAChBkB,KAAKC,WAAWrB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMK,GAAG,KAAT,kBAChBF,KAAKC,WAAWrB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMK,GAAG,aAAT,4CAEjBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAWrB,IACzCL,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpC,cAlB3Bc,aCKEuB,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb49383a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class ReportViewer extends Component {\r\n  componentDidMount() {\r\n\r\n    window.jQuery(\"#reportViewer1\").telerik_ReportViewer({\r\n      serviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\r\n      reportSource: {\r\n        report:\r\n          \"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\",\r\n      },\r\n      scale: 1.0, \r\n      sendEmail: { enabled: true },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"reportViewer1\"></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ReportDesigner extends Component {\r\n  componentDidMount() {\r\n    window.jQuery(\"#webReportDesigner\")\r\n      .telerik_WebReportDesigner({\r\n        toolboxArea: {\r\n          layout: \"list\", //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\r\n        },\r\n        serviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\r\n        report: \"Dashboard.trdp\",\r\n      })\r\n      .data(\"telerik_WebDesigner\");\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"webReportDesigner\" style={{ top: '100px'}}></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter, Switch, Link, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport ReportViewer from \"./components/ReportViewer\";\nimport ReportDesigner from \"./components/ReportDesigner\";\n\nclass App extends Component {\n  renderLink(child) {\n    return <div style={{ padding: '5px', margin: '5px', backgroundColor: 'rgba(0,0,0,0.1)'}}>\n      {child}\n    </div>\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <nav style={{ display: 'flex'}}>\n          {this.renderLink(<span>Navigation:</span>)}\n          {this.renderLink(<Link to=\"/\">Report viewer</Link>)}\n          {this.renderLink(<Link to=\"/designer\">Report Designer (Loading is very slow)</Link>)}\n          </nav>\n          <Switch>\n            <Route path=\"/designer\" exact component={ReportDesigner} />\n            <Route path=\"/\" exact component={ReportViewer}/>\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}